
<html>
<head>
<title>Test tulip-python/D3</title>
</head>

<style> 
 
 
svg {
  border: solid 1px #ccc;
}
 
.background {
  fill: none;
  pointer-events: all;
}
 
.node {
  stroke: #fff;
  stroke-width: 1.5px;
}
 
.link {
  stroke: #999;
  stroke-opacity: .6;
  stroke-width: 1.5px;
}
 
</style> 

 
<h1>Proof of concept: D3 and tulip-python</h1> 
<!--
<script src="http://code.jquery.com/jquery.js"></script>
<script src="http://d3js.org/d3.v2.min.js?2.8.1"></script> 
-->
<script src="jquery.js"></script>
<script src="d3.v2.min.js"></script> 
<script> 
 
var width = 960,
    height = 500;
 
var color = d3.scale.category20();
 
 
var force = d3.layout.force()
    .charge(-240)
    .linkDistance(40)
    .size([width, height]);

/* 
var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);
 
svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height);
*/

var tulip_address = "http://127.0.0.1:8085"

var getSelection = function()
{
	console.log("The node selection= ");
	var u = d3.selectAll("circle.node.selected").data();

	var toStringify = {};
	toStringify.nodes = new Array();

	for (i=0; i<u.length; i++)
	{
		var node = {};
		node.name = u[i].name;
		console.log(u[i]);
		toStringify.nodes.push(node);
	}
	console.log(JSON.stringify(toStringify));
	return JSON.stringify(toStringify)

};


var sendSelection = function(json)
{
	$.post(tulip_address, { json_string:json }, function(data){
		var old = d3.selectAll("circle.node.selected").data();
		/*for (i=0; i<old.length; i++)
		{
			old[i].x = data.nodes[i].x
			old[i].y = data.nodes[i].y
		}*/
		console.log(data);

	  var n = data.nodes.length;
	  var ox = 0, oy = 0;
	  data.nodes.forEach(function(d) { ox += d.x, oy += d.y; });
	  ox = ox / n - width / 2, oy = oy / n - height / 2;
	  data.nodes.forEach(function(d) { d.x -= ox, d.y -= oy; });


		force
		      .nodes(data.nodes)
		      .links(data.links)
		      .start()
		      .stop();

		var link = svg.selectAll("line.link")
		      .data(data.links)
	.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
			.exit().remove()

		
		var node = svg.selectAll("circle.node")
		      .data(data.nodes)
	.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; })
			.exit().remove()
		      .call(force.drag)
			

		//d3.selectAll("circle.node.selected").data(old).exit().remove()
		/*enter().append("circle")
		.attr("cx", function(d) { return d.x; })
	        .attr("cy", function(d) { return d.y; })
		.style("fill","purple")
		.classed("selected", 0);*/
	});
	/*var xmlhttp = new XmlHttpRequest();
	xmlhttp.open("POST", tulip_address);
	xmlhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	xmlhttp.send(json);*/
};



var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.append("rect")
	.attr("class", "button")
	.attr("width", 50)
	.attr("height", 20)
	.attr("x", 40)
	.attr("y", 40)
	.on("click", function(){d3.select(this).style("fill","yellow"); sendSelection(getSelection());})
	.on("mouseover", function(){d3.select(this).style("fill","red");})
	.on("mouseout", function(){d3.select(this).style("fill","black");})



/*http://bost.ocks.org/mike/fisheye/miserables.json"*/

d3.json(tulip_address+"?n=50", function(json) {

  var n = json.nodes.length;
  var ox = 0, oy = 0;
  json.nodes.forEach(function(d) { ox += d.x, oy += d.y; });
  ox = ox / n - width / 2, oy = oy / n - height / 2;
  json.nodes.forEach(function(d) { d.x -= ox, d.y -= oy; });

  force
      .nodes(json.nodes)
      .links(json.links)
      .start()
      .stop();

var link = svg.selectAll("line.link")
      .data(json.links)
    .enter().append("line")
      .attr("class", "link")
	.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
      .style("stroke-width", function(d) { return Math.sqrt(d.value); })
      .on("mouseover", function(){d3.select(this).style("fill","red");});

var node = svg.selectAll("circle.node")
      .data(json.nodes)
    .enter().append("circle")
      .attr("class", "node")
      .attr("r", 5)
	.attr("id", function(d, i) {return i;})
	.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; })
      .style("fill", function(d) { return color(d.group); })
      .call(force.drag)
      .on("click", function(){
		var o = d3.select(this); 
		if (o.classed("selected"))
		{
		o.classed("selected",0).style("fill","steelblue");
		}else{
		o.classed("selected",1).style("fill","red");
		}
	})
      .on("mouseover", function(){d3.select(this).style("fill","yellow"); })
      .on("mouseout",function(){
	var o = d3.select(this); 
	if (o.classed("selected")) 
	{
		o.style("fill","red");
	}else{
		o.style("fill","steelblue");
	}
      });

node.append("title")
      .text(function(d) { return d.name; });





});


/* 
d3.json("http://127.0.0.1:8085/?n=8", function(data) {
  var n = data.nodes.length;
 
  force.nodes(data.nodes).links(data.links);
 
  // Initialize the positions deterministically, for better results.
  //data.nodes.forEach(function(d, i) { d.x = d.y = width / n * i; });
 
  // Run the layout a fixed number of times.
  // The ideal number of times scales with graph complexity.
  // Of course, don't run too long—you'll hang the page!
  //force.start();
  //for (var i = n; i > 0; --i) force.tick();
  //force.stop();
 
  // Center the nodes in the middle.
  var ox = 0, oy = 0;
  data.nodes.forEach(function(d) { ox += d.x, oy += d.y; });
  ox = ox / n - width / 2, oy = oy / n - height / 2;
  data.nodes.forEach(function(d) { d.x -= ox, d.y -= oy; });
 
  var link = svg.selectAll(".link")
      .data(data.links)
    .enter().append("line")
      .attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; })
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });
 
  var node = svg.selectAll(".node")
      .data(data.nodes)
    .enter().append("circle")
      .attr("class", "node")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", 4.5)
      .style("fill", function(d) { return color(d.group); });
      //.call(force.drag);
 
  //svg.on("mousemove", function() {
  //  fisheye.center(d3.mouse(this));
 
  //  node
  //      .each(function(d) { d.display = fisheye(d); })
  //      .attr("cx", function(d) { return d.display.x; })
  //      .attr("cy", function(d) { return d.display.y; })
  //      .attr("r", function(d) { return d.display.z * 4.5; });
 
 //   link
  //      .attr("x1", function(d) { return d.source.display.x; })
   //     .attr("y1", function(d) { return d.source.display.y; })
   //     .attr("x2", function(d) { return d.target.display.x; })
   //     .attr("y2", function(d) { return d.target.display.y; });
  });

});
 */
</script> 
 
<p><aside>Mouseover to distort the nodes.</aside> 
 
<p>With complex graphs, it can be difficult to observe micro and macro features simultaneously. If you zoom in for detail, the graph is too big to view in its entirety. If you zoom out to see the overall structure, small details are lost. <a href="http://www.infovis-wiki.net/index.php/Focus-plus-Context">Focus + context</a> techniques allow interactive exploration of an area of interest (the <i>focus</i>) in greater detail, while preserving the surrounding environment (the <i>context</i>).
 
<p>Here, <a href="http://dl.acm.org/citation.cfm?id=142763">fisheye distortion</a> <a href="ftp://gatekeeper.dec.com/pub/dec/SRC/research-reports/SRC-084a.pdf">[PDF]</a> magnifies the local region around the mouse, while leaving the larger graph unaffected for context. This is particularly useful for disambiguating edge-crossings in static layouts: edges between distant nodes are distorted more strongly than local ones. If you dislike the chaotic appearance of <a href="http://mbostock.github.com/d3/ex/force.html">dynamic force layout</a>, consider using fisheye distortion instead.
 
<p>This example uses D3’s force layout in conjunction with a <a href="https://github.com/d3/d3-plugins/tree/master/fisheye">fisheye plugin</a>. For other implementations, see <a href="http://flare.prefuse.org">Flare</a> and <a href="http://sigmajs.org">Sigma.js</a>. For more on network visualization, see my previous posts on <a href="../miserables/">matrix diagrams</a>, <a href="../hive/">hive plots</a> and <a href="../uberdata/">chord diagrams</a>.
 
<footer> 
  <aside>April 10, 2012</aside> 
  <a href="../" rel="author">Mike Bostock</a> 
</footer> 
